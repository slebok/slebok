this is BabyCOBOL
CSS is ../www/babycobol.css
logo is ../www/babycobol.png

source CLIST is IBM SA32-0978-00, z/OS TSO/E CLISTs Version 2 Release 1, 1988–2013
source REXX is IBM SA32-0982-00, z/OS TSO/E REXX User's Guide Version 2 Release 1, 1988–2013

  ////  // //  ///      //   ////    //  //  ////   //   ///   ////  /// 
 ///   /////  ////    ////  ///     //////  ///   ////  ////  ///   ////
////  // //  ///      //   //      //  //  ////  ////  ///   ////  // //
statement CLIST.ATTN became SIGNAL
summary: define a handler for an attention interrupt

statement CLIST.CLOSFILE
summary: close a previously opened QSAM file

statement CLIST.CONTROL
summary: define processing options

statement CLIST.DATA
summary: statements for TSO/E to execute

statement CLIST.DATA_PROMPT
summary: respond to prompts by TSO/E commands

statement CLIST.DO became LOOP
summary: structural execution of a sequence of commands

statement CLIST.END became END
summary: end DO, SELECT or a procedure

statement CLIST.ERROR became SIGNAL
summary: check for non-zero return codes of other commands

statement CLIST.EXIT became STOP
summary: terminate the program

statement CLIST.GETFILE
summary: read a record from a QSAM file

statement CLIST.GLOBAL
summary: share values between nested programs

statement CLIST.NGLOBAL
summary: share values between procedures within a program

statement CLIST.GOTO became GO_TO
summary: branch unconditionally within a program

statement CLIST.IF became IF
summary: branch conditionally within a program

statement CLIST.LISTDSI
summary: get information about a dataset

statement CLIST.OPENFILE
summary: open a QSAM file for input and output

statement CLIST.PROC became SECTION
summary: define a procedure

statement CLIST.PUTFILE
summary: write a record to a QSAM file

statement CLIST.READ became ACCEPT
summary: read user input and store it in variables

statement CLIST.READDVAL
summary: read a &SYSDVAL control variable

statement CLIST.RETURN
summary: return from an error handler or a procedure

statement CLIST.SELECT became EVALUATE
summary: branch to multiple locations based on several conditions

statement CLIST.SET became MOVE
summary: assign a value to a variable

statement CLIST.SYSCALL became PERFORM
summary: call a local procedure

statement CLIST.SYSREF
summary: define which caller's data can a procedure access

statement CLIST.TERMIN
summary: temporary pass control to the terminal user

statement CLIST.TERMING
summary: temporary pass control to the terminal user from a nested program

statement CLIST.WRITE became DISPLAY
summary: display text on the terminal

statement CLIST.WRITENR became DISPLAY
summary: display text on the terminal without advancing a cursor to the next line

statement CLIST.EXEC became CALL
summary: call another program

  ////  // //  ///      //   ////    ////  //    //  ////  //////
 ///   /////  ////    ////  ///     //    //    //  ////    //
////  // //  ///      //   //      ////  ////  //  ////    //
statement REXX.ADDRESS became ALTER
summary: change the destination of commands

statement REXX.ARG
summary: syntactic sugar for PARSE UPPER ARG

statement REXX.CALL became CALL
summary: call a built-in or external function

statement REXX.CALL_ON became SIGNAL
summary: change an error handler

statement REXX.CALL_OFF became SIGNAL
summary: cancel an established error handler

statement REXX.DO became LOOP
summary: execute a group of instructions repeatedly

statement REXX.DROP
summary: unassign a named variable

statement REXX.EXIT became STOP
summary: terminate a program

statement REXX.IF became IF
summary: branch conditionally within a program

statement REXX.INTERPRET
summary: execute an expression as code

// continue from a loop
statement REXX.ITERATE
summary: go into the next iteration of the innermost or named DO loop

// break
statement REXX.LEAVE
summary: terminate the innermost or named DO loop

statement REXX.NOP became NEXT_SENTENCE
summary: do nothing

statement REXX.NUMERIC
summary: specify numeric conventions: significant digits, notation format, etc

statement REXX.OPTIONS
summary: change DBCS strings treatment

statement REXX.PARSE
summary: parsing in a broad sense

statement REXX.PROCEDURE
summary: protect variables by making them local (otherwise all are global)

statement REXX.PULL became ACCEPT
summary: syntactic sugar for PARSE UPPER PULL

statement REXX.PUSH
summary: LIFO output

statement REXX.QUEUE
summary: FIFO output

statement REXX.RETURN became STOP
summary: terminates a procedure or the program if no procedure is active

statement REXX.SAY became DISPLAY
summary: display a line on the terminal

statement REXX.SELECT became EVALUATE
summary: branch to multiple locations based on several conditions

statement REXX.SIGNAL became GO_TO
summary: branch unconditionally within a program

statement REXX.SIGNAL_ON became SIGNAL
summary: define a handler for a specific condition

statement REXX.SIGNAL_OFF became SIGNAL
summary: cancel an established error handler

statement REXX.TRACE
summary: perform debugging actions

statement REXX.UPPER
summary: makes contents of a variable uppercase

statement REXX.PARSE_SOURCE
summary: read files and access other sources

  ////  // //  ///      //   ////    ///    ////  ////  ////
 ///   /////  ////    ////  ///     ////   ///    //    //
////  // //  ///      //   //      // //  ////  ////  ////
statement BabyCOBOL.ACCEPT
summary: read user input and store it in variables
syntax: [17:] >> - "ACCEPT" - - Identifier - ^7 - ><

statement BabyCOBOL.ADD
summary: add two or more values together
syntax: [33:] >> - "ADD" - - Atomic - ^5 - "TO" - Atomic - #1 -12 >< &1 \ "GIVING" - Identifier /

statement BabyCOBOL.ALTER
summary: change the target of a GO TO statement
syntax: [32.] >> - "ALTER" - ProcedureName - "TO" "PROCEED" "TO" - ProcedureName - ><

statement BabyCOBOL.COPY
summary: insert contents from a different file
syntax: [37\] >> - "COPY" - FileName - #1 -24 >< &1 \ "REPLACING" - #2 -15 / &2 \2 - Literal - "BY" - Literal - ^13 /2

statement BabyCOBOL.DISPLAY
summary: display text on the terminal
syntax: [40:] >> - "DISPLAY" -2 Atomic - "DELIMITED_BY" - #2 - "SIZE" -3 #3 &2 \ "SPACE" / &3 ^18 - #4 -12 >< &4 \ "WITH_NO_ADVANCING" /

statement BabyCOBOL.DIVIDE
summary: divide a numeric value by other numbers
syntax: [50:] >> - "DIVIDE" - Atomic - "INTO" - - Atomic - ^5 - #1 -12 #2 -15 >< &1 \ "GIVING" - Identifier / &2 \ "REMAINDER" - Identifier /

statement BabyCOBOL.EVALUATE
summary: branch to multiple locations based on several conditions
syntax: [41\] >> - "EVALUATE" - AnyExpression - #1 -20 "END" - >< &1 \2 "WHEN" - #2 -2 Atomic - ^5 -3 Sentence - ^6 /2 &2 \ - "OTHER" - /

statement BabyCOBOL.GO_TO
summary: branch unconditionally within a program
syntax: [17.] >> - "GO_TO" - ProcedureName - ><
// todo: the CC paper also included GO TO ... OR ...

statement BabyCOBOL.IF
summary: branch conditionally within a program
syntax: [47,] >> - "IF" - BooleanExpression - "THEN" -2 Statement - ^7 - #1 -13 #2 -6 >< &1 \2 "ELSE" -2 Statement - ^7 /2 &2 \ "END" /

statement BabyCOBOL.LOOP
summary: structural execution of a sequence of commands
syntax: [55⇓] >> - "LOOP" - #0 -44 "END" - >< &0 \2 - #1 - "VARYING" - #2 -8 #3 -9 #4 -8 #5 -8 - ^41 /2 &2 \ Identifier / &3 \ "FROM" - Atomic / &4 \ "TO" - Atomic / &5 \ "BY" - Atomic / &1 \3 "WHILE" - BooleanExpression -25 &1 \4 "UNTIL" - BooleanExpression -25 &1 \5 Statement -32 /5

statement BabyCOBOL.MOVE
summary: partial structural assignment
syntax: [26\] >> - "MOVE" - #1 - Atomic -5 "TO" -2 Identifier - ^7 - >< &1 \ "HIGH-VALUES" - &1 \2 "LOW-VALUES" -2 &1 \3 "SPACES" -3 /3

statement BabyCOBOL.MULTIPLY
summary: multiply two or more numeric values
syntax: [33:] >> - "MULTIPLY" - Atomic - "BY" -2 Atomic - ^5 - #1 -12 >< &1 \ "GIVING" - Identifier /

statement BabyCOBOL.NEXT_SENTENCE
summary: branch unconditionally to the beginning of the next sentence
syntax: [13.] >> - "NEXT_SENTENCE" - ><

statement BabyCOBOL.PERFORM
summary: call a paragraph or section within the program
syntax: [42.] >> - "PERFORM" - ProcedureName - #1 -15 #2 -10 >< &1 \ "THROUGH" - ProcedureName / &2 \ Atomic - "TIMES" /

statement BabyCOBOL.SIGNAL
summary: specify an error handler
syntax: [24:] >> - "SIGNAL" - #1 - ProcedureName -2 "ON_ERROR" - >< &1 \ "OFF" -5 /

statement BabyCOBOL.STOP
summary: terminate the program
syntax: [7.] >> - "STOP" - ><

statement BabyCOBOL.SUBTRACT
summary: subtract one or more numeric values from another value
syntax: [34:] >> - "SUBTRACT" -2 Atomic - ^5 - "FROM" - Atomic - #1 -12 >< &1 \ "GIVING" - Identifier /

// TODO: other things like HIGH-VALUES